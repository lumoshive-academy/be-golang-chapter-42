basePath: /
definitions:
  model.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
    type: object
  utils.Response:
    properties:
      data:
        $ref: '#/definitions/model.User'
      error:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: lumoshive.academy@gmail.com
    name: API Support
    url: https://academy.lumoshive.com/contact-us
  description: This is a sample server for a Swagger API.
  license:
    name: Lumoshive Academy
    url: https://academy.lumoshive.com
  termsOfService: http://example.com/terms/
  title: Example API
  version: "1.0"
paths:
  /seacrh_users:
    get:
      description: Get a list of users that match the provided name.
      parameters:
      - description: User Name
        in: query
        name: name
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      responses: {}
      summary: Get users by name
      tags:
      - users
  /upload:
    post:
      description: Upload a file to the server.
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Upload a file
      tags:
      - files
  /users:
    get:
      consumes:
      - application/json
      description: Get details of all registered users.
      produces:
      - application/json
      responses:
        "200":
          description: All User
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get user all
      tags:
      - users
    post:
      description: Add a new user with the provided JSON data.
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      responses: {}
      summary: Add a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a user by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete user by ID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get details of a user by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get user by ID
      tags:
      - users
    put:
      description: Update the details of a user by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User object that needs to be updated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      responses: {}
      summary: Update user by ID
      tags:
      - users
schemes:
- http
swagger: "2.0"
